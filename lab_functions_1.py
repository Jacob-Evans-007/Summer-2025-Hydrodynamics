import numpy as np
from scipy.constants import G, proton_mass
from scipy.constants import k as k_B  # Boltzmann constant in J/K
from scipy.interpolate import interpolate

G = 6.6743 * 10 ** (-8)  # cm^3 g^-1 s^-2
solarm = 1.988 * 10 ** 33  # solar mass (g)
meandens = 9.21 * 10 ** (-30)  # 'mean universal density'
kpc_to_cm = 3.0857e21
gamma = 5 / 3
mu = 0.6
mp_g = proton_mass * 1e3
k_Bcgs = k_B * 1e7


def Ax(n):
    return np.log(1 + n) - (n / (1 + n))


def vcgrab(r, rs, R):
    Rhalf = 3 * kpc_to_cm
    stelmas = 1.575e10
    vc1 = (G * stelmas * solarm) / (r + (Rhalf))

    c = R / rs
    x = r / rs
    vc2 = (G * (1e12 * solarm) * c * Ax(x)) / (R * x * Ax(c))
    return np.sqrt(vc1 + vc2)


def Tc(r, rs, R):
    const = (0.6 * mp_g / (gamma * k_Bcgs))
    vc2 = vcgrab(r, rs, R)**2
    return const * vc2


def Lambdacalc(T):
    adjT = np.log10(T)
    x = np.array(
        [4.20, 4.24, 4.28, 4.32, 4.36, 4.40, 4.44, 4.48, 4.52, 4.56, 4.60, 4.64, 4.68, 4.72, 4.76, 4.80, 4.84, 4.88,
         4.92, 4.96, 5.00, 5.04, 5.08, 5.12, 5.16, 5.20, 5.24, 5.28, 5.32, 5.36, 5.40, 5.44, 5.48, 5.52, 5.56, 5.60,
         5.64, 5.68, 5.72, 5.76, 5.80, 5.84, 5.88, 5.92, 5.96, 6.00, 6.04, 6.08, 6.12, 6.16, 6.20, 6.24, 6.28, 6.32,
         6.36, 6.40, 6.44, 6.48, 6.52, 6.56, 6.60, 6.64, 6.68, 6.72, 6.76, 6.80, 6.84, 6.88, 6.92, 6.96, 7.00, 7.04,
         7.08, 7.12, 7.16, 7.20, 7.24, 7.28, 7.32, 7.36, 7.40, 7.44, 7.48, 7.52, 7.56, 7.60, 7.64, 7.68, 7.72, 7.76,
         7.80, 7.84, 7.88, 7.92, 7.96, 8.00, 8.04, 8.08, 8.12, 8.16])
    y = np.array(
        [-21.6114, -21.4833, -21.5129, -21.5974, -21.6878, -21.7659, -21.8092, -21.8230, -21.8059, -21.7621, -21.6941,
         -21.6111, -21.5286, -21.4387, -21.3589, -21.2816, -21.2168, -21.1700, -21.1423, -21.1331, -21.1525, -21.1820,
         -21.2077, -21.2093, -21.2043, -21.1937, -21.1832, -21.1811, -21.1799, -21.1883, -21.2263, -21.3118, -21.4700,
         -21.6521, -21.7926, -21.8728, -21.9090, -21.9290, -21.9539, -22.0008, -22.0678, -22.1209, -22.1521, -22.1698,
         -22.1804, -22.1977, -22.2178, -22.2383, -22.2459, -22.2557, -22.2736, -22.3075, -22.3657, -22.4391, -22.5207,
         -22.5909, -22.6490, -22.6878, -22.7148, -22.7308, -22.7361, -22.7379, -22.7283, -22.7216, -22.7102, -22.7023,
         -22.6962, -22.6921, -22.6959, -22.6994, -22.7050, -22.7170, -22.7249, -22.7378, -22.7480, -22.7629, -22.7710,
         -22.7697, -22.7655, -22.7605, -22.7565, -22.7461, -22.7323, -22.7176, -22.7039, -22.6873, -22.6700, -22.6613,
         -22.6436, -22.6251, -22.6071, -22.5914, -22.5727, -22.5542, -22.5360, -22.5172, -22.5014, -22.4828, -22.4642,
         -22.4455])
    f = interpolate.interp1d(x, y, kind='linear')
    adjLamb = f(adjT)
    Lambda = 10 ** adjLamb
    return Lambda

def dLdTfunc(T):
    Lambda = Lambdacalc(T)
    logT = np.log(T)
    logL = np.log(Lambda)

    Lambda2 = Lambdacalc(T * 1.01)
    logLadj = np.log(Lambda2)
    logTadj = np.log(T * 1.01)
    return (logLadj - logL) / (logTadj - logT)


def dVcdrfunc(r, rs, R):
    Vc = vcgrab(r, rs, R)
    logvc = np.log(Vc)
    logr = np.log(r)

    logvc2 = np.log(vcgrab(r + 3.0857e18, rs, R))
    logr2 = np.log(r + 3.0857e18)
    return (logvc2 - logvc) / (logr2 - logr)